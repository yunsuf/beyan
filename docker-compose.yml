# Beyan Document Digitization System with n8n
# Main orchestration file for the complete system

version: '3.8'

services:
  # n8n Workflow Automation Platform
  n8n:
    image: n8nio/n8n:latest
    container_name: beyan-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-beyan_admin}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-beyan_encryption_key_32_chars}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
      - GENERIC_TIMEZONE=${TIMEZONE:-UTC}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
      - ./n8n/custom-nodes:/home/node/.n8n/custom
      - ./data/uploads:/data/uploads
      - ./data/processed:/data/processed
    depends_on:
      - postgres
      - redis
    networks:
      - beyan_network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: beyan-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
      - POSTGRES_MULTIPLE_DATABASES=beyan_documents
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
      - ./data/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - beyan_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: beyan-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - beyan_network

  # Kimi-VL Service
  kimi-vl:
    build: ./services/kimi-vl
    container_name: beyan-kimi-vl
    restart: unless-stopped
    environment:
      - MODEL_PATH=/models/kimi-vl
      - DEVICE=${DEVICE:-auto}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-4}
      - API_HOST=0.0.0.0
      - API_PORT=8001
    volumes:
      - ./data/models:/models
      - ./data/uploads:/uploads
      - ./data/processed:/processed
    ports:
      - "8001:8001"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - beyan_network

  # Document Processor Service (Optional - for complex processing)
  document-processor:
    build: ./services/document-processor
    container_name: beyan-processor
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-n8n}:${POSTGRES_PASSWORD:-n8n_password}@postgres:5432/beyan_documents
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KIMI_VL_URL=http://kimi-vl:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./data/uploads:/uploads
      - ./data/processed:/processed
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
      - kimi-vl
    networks:
      - beyan_network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: beyan-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./data/uploads:/var/www/uploads
    depends_on:
      - n8n
      - kimi-vl
    networks:
      - beyan_network
    profiles:
      - production

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: beyan-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - beyan_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: beyan-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - beyan_network
    profiles:
      - monitoring

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  beyan_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
